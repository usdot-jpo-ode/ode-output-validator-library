[_settings]
DataType = json
Sequential = False

# metadata fields
[metadata.recordGeneratedAt]
Type = timestamp
LatestTime = NOW
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]},"thenPart":{"skipSequentialValidation":"true"}}]}

[metadata.recordGeneratedBy]
Type = enum
Values = ["TMC", "OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]

[metadata.recordType]
Type = enum
Values = ["bsmLogDuringEvent", "rxMsg", "dnMsg", "bsmTx", "driverAlert", "unsupported"]
EqualsValue = {"conditions":[
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]},"thenPart":{"matchAgainst":${Values}}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]}}]}

[metadata.sanitized]
Type = enum
Values = ["True", "False"]

[metadata.schemaVersion]
Type = decimal
EqualsValue = 6

[metadata.securityResultCode]
Type = enum
Values = ["success", "unknown", "inconsistentInputParameters", "spduParsingInvalidInput", "spduParsingUnsupportedCriticalInformationField", "spduParsingCertificateNotFound", "spduParsingGenerationTimeNotAvailable", "spduParsingGenerationLocationNotAvailable", "spduCertificateChainNotEnoughInformationToConstructChain", "spduCertificateChainChainEndedAtUntrustedRoot", "spduCertificateChainChainWasTooLongForImplementation", "spduCertificateChainCertificateRevoked", "spduCertificateChainOverdueCRL", "spduCertificateChainInconsistentExpiryTimes", "spduCertificateChainInconsistentStartTimes", "spduCertificateChainInconsistentChainPermissions", "spduCryptoVerificationFailure", "spduConsistencyFutureCertificateAtGenerationTime", "spduConsistencyExpiredCertificateAtGenerationTime", "spduConsistencyExpiryDateTooEarly", "spduConsistencyExpiryDateTooLate", "spduConsistencyGenerationLocationOutsideValidityRegion", "spduConsistencyNoGenerationLocation", "spduConsistencyUnauthorizedPSID", "spduInternalConsistencyExpiryTimeBeforeGenerationTime", "spduInternalConsistencyextDataHashDoesntMatch", "spduInternalConsistencynoExtDataHashProvided", "spduInternalConsistencynoExtDataHashPresent", "spduLocalConsistencyPSIDsDontMatch", "spduLocalConsistencyChainWasTooLongForSDEE", "spduRelevanceGenerationTimeTooFarInPast", "spduRelevanceGenerationTimeTooFarInFuture", "spduRelevanceExpiryTimeInPast", "spduRelevanceGenerationLocationTooDistant", "spduRelevanceReplayedSpdu", "spduCertificateExpired"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordType","fieldValues":["bsmLogDuringEvent", "rxMsg", "dnMsg", "bsmTx"]},"thenPart":{"matchAgainst":${Values}}},
    {"ifPart":{"fieldName":"metadata.recordType","fieldValues":["driverAlert"]}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]}}]}

[metadata.bsmSource]
Type = enum
Values = ["RV", "EV", "unknown"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordType","fieldValues":["bsmLogDuringEvent"]},"thenPart":{"matchAgainst":["RV","EV"]}},
    {"ifPart":{"fieldName":"metadata.recordType","fieldValues":["bsmTx"]},"thenPart":{"matchAgainst":["EV"]}},
    {"ifPart":{"fieldName":"metadata.payloadType","fieldValues":["us.dot.its.jpo.ode.model.OdeBsmPayload"]},"thenPart":{"matchAgainst":["RV"]}},
    {"ifPart":{"fieldName":"metadata.recordType","fieldValues":["rxMsg", "dnMsg", "driverAlert"]}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]}}]}

[metadata.payloadType]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordType","fieldValues":["bsmLogDuringEvent","bsmTx"]},"thenPart":{"matchAgainst":["us.dot.its.jpo.ode.model.OdeBsmPayload"]}},
    {"ifPart":{"fieldName":"metadata.recordType","fieldValues":["dnMsg"]},"thenPart":{"matchAgainst":["us.dot.its.jpo.ode.model.OdeTimPayload"]}},
    {"ifPart":{"fieldName":"metadata.recordType","fieldValues":["driverAlert"]},"thenPart":{"matchAgainst":["us.dot.its.jpo.ode.model.OdeDriverAlertPayload"]}},
    {"ifPart":{"fieldName":"metadata.receivedMessageDetails.rxSource","fieldValues":["RV"]},"thenPart":{"matchAgainst":["us.dot.its.jpo.ode.model.OdeBsmPayload"]}},
    {"ifPart":{"fieldName":"metadata.receivedMessageDetails.rxSource","fieldValues":["RSU","SAT","SNMP","NA"]},"thenPart":{"matchAgainst":["us.dot.its.jpo.ode.model.OdeTimPayload"]}}]}

[metadata.logFileName]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]},"thenPart":{"startsWithField":"metadata.recordType"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]}}]}

[metadata.odeReceivedAt]
Type = timestamp
LatestTime = NOW

# metadata.serialId fields
[metadata.serialId]
Type = string

[metadata.serialId.streamId]
Type = string

[metadata.serialId.bundleSize]
Type = decimal
UpperLimit = 2147483648
LowerLimit = 1
EqualsValue = {"conditions":[
    {"ifPart":{"fieldName":"metadata.recordType","fieldValues":["rxMsg"]},"thenPart":{"skipSequentialValidation":"true"}},
    {"ifPart":{"fieldName":"metadata.sanitized","fieldValues":["True"]},"thenPart":{"skipSequentialValidation":"true"}}]}

[metadata.serialId.bundleId]
Type = decimal
UpperLimit = 9223372036854775807
LowerLimit = 0

[metadata.serialId.recordId]
Type = decimal
UpperLimit = 2147483647
LowerLimit = 0
EqualsValue = {"conditions":[
    {"ifPart":{"fieldName":"metadata.recordType","fieldValues":["rxMsg"]},"thenPart":{"skipSequentialValidation":"true"}},
    {"ifPart":{"fieldName":"metadata.sanitized","fieldValues":["True"]},"thenPart":{"skipSequentialValidation":"true"}}]}

[metadata.serialId.serialNumber]
Type = serial
#Increment = 1
UpperLimit = 9223372036854775807
LowerLimit = 0
EqualsValue = {"conditions":[
    {"ifPart":{"fieldName":"metadata.recordType","fieldValues":["rxMsg"]},"thenPart":{"skipSequentialValidation":"true"}},
    {"ifPart":{"fieldName":"metadata.sanitized","fieldValues":["True"]},"thenPart":{"skipSequentialValidation":"true"}}]}

# metadata.receivedMessageDetails fields
[metadata.receivedMessageDetails.locationData.latitude]
Type = decimal
LowerLimit = -90.0
UpperLimit = 90.0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]}}]}

[metadata.receivedMessageDetails.locationData.longitude]
Type = decimal
LowerLimit = -180.0
UpperLimit = 180.0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]}}]}

[metadata.receivedMessageDetails.locationData.elevation]
Type = decimal
LowerLimit = -409.6
UpperLimit = 6143.9
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]}}]}
AllowEmpty = True

[metadata.receivedMessageDetails.locationData.speed]
Type = decimal
LowerLimit = 0
UpperLimit = 163.82
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]}}]}

[metadata.receivedMessageDetails.locationData.heading]
Type = decimal
LowerLimit = 0
UpperLimit = 359.9875
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]}}]}

[metadata.receivedMessageDetails.rxSource]
Type = enum
Values = ["RSU", "SAT", "RV", "SNMP", "NA"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]}},
    {"ifPart":{"fieldName":"metadata.recordType","fieldValues":["rxMsg"]},"thenPart":{"matchAgainst":${Values}}},
    {"ifPart":{"fieldName":"metadata.recordType","fieldValues":["bsmLogDuringEvent", "dnMsg", "bsmTx", "driverAlert"]}}]}

# metadata.request fields
[metadata.request.ode.verb]
Type = enum
Values = ["POST", "PUT", "GET", "DELETE"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]},"thenPart":{"matchAgainst":["POST", "PUT"]}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.ode.version]
Type = decimal
UpperLimit = 3
LowerLimit = 0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["TMC"]},"thenPart":{"matchAgainst":[3]}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.sdw.recordId]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.sdw.recordId"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.sdw.serviceRegion.nwCorner.latitude]
Type = decimal
LowerLimit = -90.0
UpperLimit = 90.0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.sdw.serviceRegion.nwCorner.latitude"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.sdw.serviceRegion.nwCorner.longitude]
Type = decimal
LowerLimit = -180.0
UpperLimit = 180.0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.sdw.serviceRegion.nwCorner.longitude"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.sdw.serviceRegion.seCorner.latitude]
Type = decimal
LowerLimit = -90.0
UpperLimit = 90.0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.sdw.serviceRegion.seCorner.latitude"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.sdw.serviceRegion.seCorner.longitude]
Type = decimal
LowerLimit = -180.0
UpperLimit = 180.0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.sdw.serviceRegion.seCorner.longitude"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.sdw.ttl]
Type = enum
Values = ["oneminute", "thirtyminutes", "oneday", "oneweek", "onemonth", "oneyear"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.sdw.ttl"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.rsus.rsus.rsuTarget]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.rsus.rsus.rsuTarget"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.rsus.rsus.rsuRetries]
Type = decimal
LowerLimit = 0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.rsus.rsus.rsuRetries"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.rsus.rsus.rsuTimeout]
Type = decimal
LowerLimit = 0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.rsus.rsus.rsuTimeout"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.rsus.rsus.rsuIndex]
Type = decimal
LowerLimit = 0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.rsus.rsus.rsuIndex"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.snmp.mode]
Type = decimal
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.snmp.mode"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.snmp.deliverystart]
Type = timestamp
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.snmp.deliverystart"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.snmp.deliverystop]
Type = timestamp
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.snmp.deliverystop"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.snmp.rsuid]
Type = decimal
LowerLimit = 0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.snmp.rsuid"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.snmp.enable]
Type = decimal
UpperLimit = 1
LowerLimit = 0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.snmp.enable"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.snmp.channel]
Type = decimal
LowerLimit = 0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.snmp.channel"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.snmp.msgid]
Type = decimal
LowerLimit = 0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.snmp.msgid"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.snmp.interval]
Type = decimal
LowerLimit = 0
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.snmp.interval"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

[metadata.request.snmp.status]
Type = decimal
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"metadata.request.snmp.status"}},
    {"ifPart":{"fieldName":"metadata.recordGeneratedBy","fieldValues":["OBU", "RSU", "TMC_VIA_SAT", "TMC_VIA_SNMP"]}}]}

#payload.data.MessageFrame.value.TravelerInformation fields

[payload.data.MessageFrame.value.TravelerInformation.msgCnt]
Type = decimal
LowerLimit = 0
UpperLimit = 127

[payload.data.MessageFrame.value.TravelerInformation.timestamp]
Type = decimal
LowerLimit = 0
UpperLimit = 527040
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.timestamp"}}]}

[payload.data.MessageFrame.value.TravelerInformation.packetID]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.packetID"}}]}

[payload.data.MessageFrame.value.TravelerInformation.urlB]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.urlB"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.notUsed]
Type = decimal
LowerLimit = 0
UpperLimit = 31

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.frameType]
Type = choice
Choices = ["unknown", "advisory", "roadSignage", "commercialStorage"]

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.frameType] ------
#Type = enum
#Values = ["advisory", "road sign"]

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId]
Type = choice
Choices = ["furtherInfoID", "roadSignID"]

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position.lat]
Type = decimal
LowerLimit = -900000000
UpperLimit = 900000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position.long]
Type = decimal
LowerLimit = -1799999999
UpperLimit = 1800000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position.elevation]
Type = decimal
LowerLimit = -4096
UpperLimit = 61439
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position.elevation"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position3D.regionalExtension]
#Type = string
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.position.regionalExtension"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.viewAngle]
Type = string

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.mutcdCode]
Type = choice
Choices = ["none", "regulatory", "warning", "maintenance", "motoristService", "guide", "rec"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.mutcdCode"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.MsgCRC]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.msgId.roadSignID.MsgCRC"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.startYear]
Type = decimal
LowerLimit = 0
UpperLimit = 4095

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.startTime]
Type = decimal
LowerLimit = 0
UpperLimit = 527040

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.durationTime]
Type = decimal
LowerLimit = 0
UpperLimit = 320000

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.priority]
Type = decimal
LowerLimit = 0
UpperLimit = 7

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.notUsed1]
Type = decimal
LowerLimit = 0
UpperLimit = 31

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.name]
Type = String
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.name"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.id.id]
Type = decimal
LowerLimit = 0
UpperLimit = 65535
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.id"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.id.region]
Type = decimal
LowerLimit = 0
UpperLimit = 65535
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.id.region"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor.lat]
Type = decimal
LowerLimit = -900000000
UpperLimit = 900000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor.long]
Type = decimal
LowerLimit = -1799999999
UpperLimit = 1800000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor.elevation]
Type = decimal
LowerLimit = -4096
UpperLimit = 61439
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor.elevation"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor.regionalExtension]
#Type = string
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.anchor.regionalExtension"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.laneWidth]
Type = decimal
LowerLimit = 0
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.laneWidth"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.directionality]
Type = choice
Choices = ["unavailable", "forward", "reverse", "both"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.directionality"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.directionality]
#Type = enum
#Values = ["unavailable", "forward", "reverse", "both"]
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.directionality"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.closedPath]
Type = choice
Choices = ["true", "false"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.closedPath"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.closedPath]
#Type = enum
#alues = ["true", "false"]
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.closedPath"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.direction]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.direction"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description]
Type = choice
Choices = ["path", "geometry", "oldregion"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.scale]
Type = decimal
LowerLimit = 0
UpperLimit = 15
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.scale"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset]
Type = choice
Choices = ["xy", "ll"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy]
Type = choice
Choices = ["nodes", "computed"]
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta]
Type = choice
Choices = ["node-XY1", "node-XY2", "node-XY3", "node-XY4", "node-XY5", "node-XY6", "node-LatLon", "regional"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY1.x]#Choice
Type = decimal
LowerLimit = -512
UpperLimit = 511
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY1"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY1.y]#Choice
Type = decimal
LowerLimit = -512
UpperLimit = 511
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY1"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY2.x]#Choice
Type = decimal
LowerLimit = -1024
UpperLimit = 1023
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY2"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY2.y]#Choice
Type = decimal
LowerLimit = -1024
UpperLimit = 1023
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY2"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY3.x]#Choice
Type = decimal
LowerLimit = -2048
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY3"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY3.y]#Choice
Type = decimal
LowerLimit = -2048
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY3"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY4.x]#Choice
Type = decimal
LowerLimit = -4096
UpperLimit = 4095
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY4"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY4.y]#Choice
Type = decimal
LowerLimit = -4096
UpperLimit = 4095
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY4"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY5.x]#Choice
Type = decimal
LowerLimit = -8192
UpperLimit = 8191
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY5"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY5.y]#Choice
Type = decimal
LowerLimit = -8192
UpperLimit = 8191
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY5"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY6.x]#Choice
Type = decimal
LowerLimit = -32768
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY6"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY6.y]#Choice
Type = decimal
LowerLimit = -32768
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-XY6"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-LatLon.lon]#Choice
Type = decimal
LowerLimit = -1799999999
UpperLimit = 1800000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-LatLon"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-LatLon.lat]#Choice
Type = decimal
LowerLimit = -900000000
UpperLimit = 900000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.node-LatLon"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.reginalExtension]
#Type = String
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.regionalExtension"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.localNode.NodeAttributeXYList.list.NodeAttributeXY]
Type = enum
Values = ["reserved", "stopLine", "roundedCapStyleA", "roundedCapStyleB", "mergePoint", "divergePoint", "downstreamStopLine", "downstreamStartNode", "closedToTraffic", "safeIsland", "curbPresentAtStepOff", "hydrantPresent"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.localNode"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.disabled.SegmentAttributeXYList.list.SegmentAttributeXY]
Type = enum
Values = ["reserved", "doNotBlock", "whiteLine", "merginLaneLeft", "mergingLaneRight", "curbOnLeft", "curbOnRight", "loadingzoneOnLeft", "loadingzoneOnRight", "turnOutPointOnLeft", "curbPresentAtStepOff", "loadingZoneOnLeft", "loadingzoneOnRight", "turnoutPointOnLeft", "turnOutPointOnRight", "adjacentParkingOnLeft", "adjacentParkingOnRight", "adjacentBikeLaneOnLeft", "adjacentBikeLaneOnRight", "sharedBikeLane", "bikeBoxInFront", "transitStopOnLeft", "transitStopOnRight", "transitStopInLane", "sharedWithTrackedVehicle", "safeIsland", "lowCurbsPresent", "rumbleStripPresent", "audibleSignalingPresent", "adaptiveTimingPresent", "rfSignalRequestPresent", "partialCurbIntrustion", "taperToLeft", "taperToRight", "taperToCenterline", "parallelParking", "headinParking", "freeParking", "timeRestrictionsOnParking", "costToPark", "midBlockCurbPresent", "unEvenPavementPresent"] 
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.disabled"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.enabled.SegmentAttributeXYList.list.SegmentAttributeXY]
Type = enum
Values = ["reserved", "doNotBlock", "whiteLine", "merginLaneLeft", "mergingLaneRight", "curbOnLeft", "curbOnRight", "loadingzoneOnLeft", "loadingzoneOnRight", "turnOutPointOnLeft", "curbPresentAtStepOff", "loadingZoneOnLeft", "loadingzoneOnRight", "turnoutPointOnLeft", "turnOutPointOnRight", "adjacentParkingOnLeft", "adjacentParkingOnRight", "adjacentBikeLaneOnLeft", "adjacentBikeLaneOnRight", "sharedBikeLane", "bikeBoxInFront", "transitStopOnLeft", "transitStopOnRight", "transitStopInLane", "sharedWithTrackedVehicle", "safeIsland", "lowCurbsPresent", "rumbleStripPresent", "audibleSignalingPresent", "adaptiveTimingPresent", "rfSignalRequestPresent", "partialCurbIntrustion", "taperToLeft", "taperToRight", "taperToCenterline", "parallelParking", "headinParking", "freeParking", "timeRestrictionsOnParking", "costToPark", "midBlockCurbPresent", "unEvenPavementPresent"] 
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.enabled"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute]
Type = choice
Choices = ["pathEndPointAngle", "laneCrownPointCenter", "laneCrownPointLeft", "laneCrownPointRight", "laneAngle", "speedLimits", "regional Sequence"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.pathEndPointAngle]#Choice
Type = decimal
LowerLimit = -150
UpperLimit = 150
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.pathEndPointAngle"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointCenter]#Choice
Type = decimal
LowerLimit = -128
UpperLimit = 127
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointCenter"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointLeft]#Choice
Type = decimal
LowerLimit = -128
UpperLimit = 127
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointLeft"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointRight]#Choice
Type = decimal
LowerLimit = -128
UpperLimit = 127
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointRight"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneAngle]#Choice
Type = decimal
LowerLimit = -180
UpperLimit = 180
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneAngle"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.speedLimits.list.RegulatorySpeedLimit.speed]
Type = decimal
LowerLimit = 0
UpperLimit = 8191
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.speedLimit"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.speedLimits.list.RegulatorySpeedLimit.type]
Type = enum
Values = ["unkown", "maxSpeedInSchoolZone", "maxSpeedInSchoolZoneWhenChildrenArePresent", "maxSpeedInConstructionZone", "vehicleMinSpeed", "vehicleMaxSpeed", "vehicleNightMaxSpeed", "truckMinSpeed", "truckMaxSpeed", "truckNightMaxSpeed", "vehiclesWIthTrailersMinSpeed", "vehiclesWithTrailersMaxSpeed", "vehiclesWithTrailersNightMaxSpeed"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.speedLimit"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.dWidth]
Type = decimal
LowerLimit = -512
UpperLimit = 511
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.dwidth"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.dElevation]
Type = decimal
LowerLimit = -512
UpperLimit = 511
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.dElevation"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.regionalExtension]
#Type = string
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.regionalExtension"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.referenceLaneID]
Type = decimal
LowerLimit = 0
UpperLimit = 255
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.offsetXaxis]
Type = choice
Choices = ["small", "large"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.offsetXaxis.small]
Type = decimal
LowerLimit = -2047
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.offsetXaxis.large]
Type = decimal
LowerLimit = -32767
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.offsetYaxis]
Type = choice
Choices = ["small", "large"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.offsetYaxis.small]
Type = decimal
LowerLimit = -2047
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.offsetYaxis.large]
Type = decimal
LowerLimit = -32767
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.rotateXY]
Type = decimal
LowerLimit = 0
UpperLimit = 28800
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.rotateXY"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.scaleXaxis]
Type = decimal
LowerLimit = -2048
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.compute.scaleXaxis"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.scaleYaxis]
Type = decimal
LowerLimit = -2048
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.compute.scaleYaxis"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.regionalExtension]
#Type = string
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.regionalExtension"}}]}
[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta]
Type = choice
Choices = ["node-LL1", "node-LL2", "node-LL3", "node-LL4", "node-LL5", "node-LL6", "node-LatLon", "regional"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll1.lon]#choice
Type = decimal
LowerLimit = -2048
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll1"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll1.lat]#choice
Type = decimal
LowerLimit = -2048
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll1"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll2.lon]#choice
Type = decimal
LowerLimit = -8192
UpperLimit = 8191
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll2"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll2.lat]#choice
Type = decimal
LowerLimit = -8192
UpperLimit = 8191
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll2"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll3.lon]#choice
Type = decimal
LowerLimit = -32786
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll3"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll3.lat]#choice
Type = decimal
LowerLimit = -32768
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll3"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll4.lon]#choice
Type = decimal
LowerLimit = -131072
UpperLimit = 131071
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll4"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll4.lat]#choice
Type = decimal
LowerLimit = -131072
UpperLimit = 131071
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll4"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll5.lon]#choice
Type = decimal
LowerLimit = -2097152
UpperLimit = 2097151
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll5"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll5.lat]#choice
Type = decimal
LowerLimit = -2097152
UpperLimit = 2097151
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll5"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll6.lon]#choice
Type = decimal
LowerLimit = -8388608
UpperLimit = 8388608
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll6"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll6.lat]#choice
Type = decimal
LowerLimit = -8388608
UpperLimit = 8388608
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-ll6"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-LatLon.lon]#choice
Type = decimal
LowerLimit = -1799999999
UpperLimit = 1800000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-LatLon"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-LatLon.lat]#choice
Type = decimal
LowerLimit = -900000000
UpperLimit = 900000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.node-LatLon"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.regionalExtension]
#Type = decimal
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.delta.regionalExtension"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.localNode.NodeAttributeLLList.list.NodeAttributeLL]
Type = enum
Values = ["reserved", "stopLine", "roundedCapStyleA", "roundedCapStyleB", "mergePoint", "divergePoint", "downstreamStopLine", "downstreamStartNode", "closedToTraffic", "safeIsland", "curbPresentAtStepOff", "hydrantPresent"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.list.attributes.localNode"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.disabled.SegmentAttributeLLList.list.SegmentAttributeLL]
Type = enum
Values = ["reserved", "doNotBlock", "whiteLine", "merginLaneLeft", "mergingLaneRight", "curbOnLeft", "curbOnRight", "loadingzoneOnLeft", "loadingzoneOnRight", "turnOutPointOnLeft", "curbPresentAtStepOff", "loadingZoneOnLeft", "loadingzoneOnRight", "turnoutPointOnLeft", "turnOutPointOnRight", "adjacentParkingOnLeft", "adjacentParkingOnRight", "adjacentBikeLaneOnLeft", "adjacentBikeLaneOnRight", "sharedBikeLane", "bikeBoxInFront", "transitStopOnLeft", "transitStopOnRight", "transitStopInLane", "sharedWithTrackedVehicle", "safeIsland", "lowCurbsPresent", "rumbleStripPresent", "audibleSignalingPresent", "adaptiveTimingPresent", "rfSignalRequestPresent", "partialCurbIntrustion", "taperToLeft", "taperToRight", "taperToCenterline", "parallelParking", "headinParking", "freeParking", "timeRestrictionsOnParking", "costToPark", "midBlockCurbPresent", "unEvenPavementPresent"] 
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.list.attributes.disabled"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.enabled.SegmentAttributeLLList.list.SegmentAttributeLL]
Type = enum
Values = ["reserved", "doNotBlock", "whiteLine", "merginLaneLeft", "mergingLaneRight", "curbOnLeft", "curbOnRight", "loadingzoneOnLeft", "loadingzoneOnRight", "turnOutPointOnLeft", "curbPresentAtStepOff", "loadingZoneOnLeft", "loadingzoneOnRight", "turnoutPointOnLeft", "turnOutPointOnRight", "adjacentParkingOnLeft", "adjacentParkingOnRight", "adjacentBikeLaneOnLeft", "adjacentBikeLaneOnRight", "sharedBikeLane", "bikeBoxInFront", "transitStopOnLeft", "transitStopOnRight", "transitStopInLane", "sharedWithTrackedVehicle", "safeIsland", "lowCurbsPresent", "rumbleStripPresent", "audibleSignalingPresent", "adaptiveTimingPresent", "rfSignalRequestPresent", "partialCurbIntrustion", "taperToLeft", "taperToRight", "taperToCenterline", "parallelParking", "headinParking", "freeParking", "timeRestrictionsOnParking", "costToPark", "midBlockCurbPresent", "unEvenPavementPresent"] 
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.list.attributes.enabled"}}]}

#there is a choice between pathEndPointAngle, laneCrownPointCenter, laneCrownPointLeft, laneCrownPointRight, laneAngle, speedLimits, and a regional sequence
[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.pathEndPointAngle]#Choice
Type = decimal
LowerLimit = -150
UpperLimit = 150
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.pathEndPointAngle"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointCenter]#Choice
Type = decimal
LowerLimit = -128
UpperLimit = 127
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointCenter"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointLeft]#Choice
Type = decimal
LowerLimit = -128
UpperLimit = 127
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointLeft"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointRight]#Choice
Type = decimal
LowerLimit = -128
UpperLimit = 127
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointRight"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneAngle]#Choice
Type = decimal
LowerLimit = -180
UpperLimit = 180
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneAngle"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.speedLimits.list.RegulatorySpeedLimit.speed]
Type = decimal
LowerLimit = 0
UpperLimit = 8191
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.speedLimits"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.speedLimits.list.RegulatorySpeedLimit.type]
Type = enum
Values = ["unkown", "maxSpeedInSchoolZone", "maxSpeedInSchoolZoneWhenChildrenArePresent", "maxSpeedInConstructionZone", "vehicleMinSpeed", "vehicleMaxSpeed", "vehicleNightMaxSpeed", "truckMinSpeed", "truckMaxSpeed", "truckNightMaxSpeed", "vehiclesWIthTrailersMinSpeed", "vehiclesWithTrailersMaxSpeed", "vehiclesWithTrailersNightMaxSpeed"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.speedLimits"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.dWidth]
Type = decimal
LowerLimit = -512
UpperLimit = 511
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.list.attributes.localNode"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.dElevation]
Type = decimal
LowerLimit = -512
UpperLimit = 511
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.list.attributes.dElevation"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.ll.nodes.NodeLL.list.attributes.regional]
#Type = string
[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.direction]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.extent]
Type = enum
Value = ["useInstantlyOnly", "useFor3meters", "useFor10meters", "useFor50meters", "useFor100meters", "useFor500meters", "useFor1000meters", "useFor5000meters", "useFor10000meters", "useFor50000meters", "useFor100000meters", "useFor500000meters", "useFo1000000meters", "useFor5000000meters", "useFor10000000meters", "forever"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.extent"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.laneWidth]
Type = decimal
LowerLimit = 0
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.circle.center.lat]
Type = decimal
LowerLimit = -900000000
UpperLimit = 900000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.circle.center.long]
Type = decimal
LowerLimit = -1799999999
UpperLimit = 1800000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.circle.center.elevation]
Type = decimal
LowerLimit = -4096
UpperLimit = 61439
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.cirlce.center.elevation"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.circle.center.regionalExtension]
#Type = string
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.regionalExtension"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.circle.radius]
Type = decimal
LowerLimit = 0
UpperLimit = 4095
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.circle.units]
Type = enum
Values = ["center", "cm2-5", "decimeter", "meter", "kilometer", "foot", "yard", "mile"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometry.regionalExtension]
#Type = string
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.geometr.regionalExtension"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.direction]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.extent]
Type = enum
Values = ["useInstantlyOnly", "useFor3meters", "useFor10meters", "useFor50meters", "useFor100meters", "useFor500meters", "useFor1000meters", "useFor5000meters", "useFor10000meters", "useFor50000meters", "useFor100000meters", "useFor500000meters", "useFor1000000meters", "useFor5000000meters", "useFor10000000meters", "forever"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.extent"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area]
Type = choice
Choices = ["shapePointSet", "circle", "regionPointSet"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.anchor.lat]
Type = decimal
UpperLimit = 900000001
LowerLimit = -900000000
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.anchor"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.anchor.long]
Type = decimal
UpperLimit = 1800000001
LowerLimit = -1799999999
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.anchor"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.anchor.elevation]
Type = decimal
UpperLimit = 61439
LowerLimit = -4096
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.anchor.elevation"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.anchor.regionalExtension]
#Type = string
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.anchor.regionalExtension"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.directionality]
Type = enum
Values = ["unavailable", "forward", "reverse", "both"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.directionality"}}]}

#There is a choice here between nodes -xy1-6 and node-latlon
#There is also a choice between nodes and attributes
[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta]
Type = choice
Choices = ["node-XY1", "node-XY2", "node-XY3", "node-XY4", "node-XY5", "node-XY6", "node-LatLon", "regional"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes]
Type = choice
Choices = ["nodes", "computed"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-XY1.x]#Choice
Type = decimal
LowerLimit = -512
UpperLimit = 511
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY1"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-XY1.y]#Choice
Type = decimal
LowerLimit = -512
UpperLimit = 511
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY1"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-XY2.x]#Choice
Type = decimal
LowerLimit = -1024
UpperLimit = 1023
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY2"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-XY2.y]#Choice
Type = decimal
LowerLimit = -1024
UpperLimit = 1023
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY2"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-XY3.x]#Choice
Type = decimal
LowerLimit = -2048
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY3"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-XY3.y]#Choice
Type = decimal
LowerLimit = -2048
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY3"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-XY4.x]#Choice
Type = decimal
LowerLimit = -4096
UpperLimit = 4095
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY4"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-XY4.y]#Choice
Type = decimal
LowerLimit = -4096
UpperLimit = 4095
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY4"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-XY5.x]#Choice
Type = decimal
LowerLimit = -8192
UpperLimit = 8191
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY5"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-XY5.y]#Choice
Type = decimal
LowerLimit = -8192
UpperLimit = 8191
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY5"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-XY6.x]#Choice
Type = decimal
LowerLimit = -32768
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY6"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-XY6.y]#Choice
Type = decimal
LowerLimit = -32768
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY6"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-LatLon.lon]#Choice
Type = decimal
LowerLimit = -1799999999
UpperLimit = 1800000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-LatLon"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.nodes.NodeXY.list.delta.node-LatLon.lat]#Choice
Type = decimal
LowerLimit = -900000000
UpperLimit = 900000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-LatLon"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.delta.node-XY1.x]
#Type = String
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.delta.regionalExtension"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.attributes.localNode.NodeAttributeXYList.list.NodeAttributeXY]
Type = enum
Values = ["reserved", "stopLine", "roundedCapStyleA", "roundedCapStyleB", "mergePoint", "divergePoint", "downstreamStopLine", "downstreamStartNode", "closedToTraffic", "safeIsland", "curbPresentAtStepOff", "hydrantPresent"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.localNode"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.attributes.disabled.SegmentAttributeXYList.list.SegmentAttributeXY]
Type = enum
Values = ["reserved", "doNotBlock", "whiteLine", "merginLaneLeft", "mergingLaneRight", "curbOnLeft", "curbOnRight", "loadingzoneOnLeft", "loadingzoneOnRight", "turnOutPointOnLeft", "curbPresentAtStepOff", "loadingZoneOnLeft", "loadingzoneOnRight", "turnoutPointOnLeft", "turnOutPointOnRight", "adjacentParkingOnLeft", "adjacentParkingOnRight", "adjacentBikeLaneOnLeft", "adjacentBikeLaneOnRight", "sharedBikeLane", "bikeBoxInFront", "transitStopOnLeft", "transitStopOnRight", "transitStopInLane", "sharedWithTrackedVehicle", "safeIsland", "lowCurbsPresent", "rumbleStripPresent", "audibleSignalingPresent", "adaptiveTimingPresent", "rfSignalRequestPresent", "partialCurbIntrustion", "taperToLeft", "taperToRight", "taperToCenterline", "parallelParking", "headinParking", "freeParking", "timeRestrictionsOnParking", "costToPark", "midBlockCurbPresent", "unEvenPavementPresent"] 
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.disabled"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.attributes.enabled.SegmentAttributeXYList.list.SegmentAttributeXY]
Type = enum
Values = ["reserved", "doNotBlock", "whiteLine", "merginLaneLeft", "mergingLaneRight", "curbOnLeft", "curbOnRight", "loadingzoneOnLeft", "loadingzoneOnRight", "turnOutPointOnLeft", "curbPresentAtStepOff", "loadingZoneOnLeft", "loadingzoneOnRight", "turnoutPointOnLeft", "turnOutPointOnRight", "adjacentParkingOnLeft", "adjacentParkingOnRight", "adjacentBikeLaneOnLeft", "adjacentBikeLaneOnRight", "sharedBikeLane", "bikeBoxInFront", "transitStopOnLeft", "transitStopOnRight", "transitStopInLane", "sharedWithTrackedVehicle", "safeIsland", "lowCurbsPresent", "rumbleStripPresent", "audibleSignalingPresent", "adaptiveTimingPresent", "rfSignalRequestPresent", "partialCurbIntrustion", "taperToLeft", "taperToRight", "taperToCenterline", "parallelParking", "headinParking", "freeParking", "timeRestrictionsOnParking", "costToPark", "midBlockCurbPresent", "unEvenPavementPresent"] 
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.enabled"}}]}

#there is a choice between pathEndPointAngle, laneCrownPointCenter, laneCrownPointLeft, laneCrownPointRight, laneAngle, speedLimits, and a regional sequence
[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.pathEndPointAngle]#Choice
Type = decimal
LowerLimit = -150
UpperLimit = 150
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.pathEndPointAngle"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointCenter]#Choice
Type = decimal
LowerLimit = -128
UpperLimit = 127
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointCenter"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointLeft]#Choice
Type = decimal
LowerLimit = -128
UpperLimit = 127
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointLeft"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointRight]#Choice
Type = decimal
LowerLimit = -128
UpperLimit = 127
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneCrownPointRight"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneAngle]#Choice
Type = decimal
LowerLimit = -180
UpperLimit = 180
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.laneAngle"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.speedLimits.list.RegulatorySpeedLimit.speed]
Type = decimal
LowerLimit = 0
UpperLimit = 8191
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.speedLimit"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.speedLimits.list.RegulatorySpeedLimit.type]
Type = enum
Values = ["unkown", "maxSpeedInSchoolZone", "maxSpeedInSchoolZoneWhenChildrenArePresent", "maxSpeedInConstructionZone", "vehicleMinSpeed", "vehicleMaxSpeed", "vehicleNightMaxSpeed", "truckMinSpeed", "truckMaxSpeed", "truckNightMaxSpeed", "vehiclesWIthTrailersMinSpeed", "vehiclesWithTrailersMaxSpeed", "vehiclesWithTrailersNightMaxSpeed"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.data.LaneDataAttributeList.list.LaneDataAttribute.speedLimit"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.attributes.dWidth]
Type = decimal
LowerLimit = -512
UpperLimit = 511
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.dwidth"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.NodeXY.list.attributes.dElevation]
Type = decimal
LowerLimit = -512
UpperLimit = 511
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.dElevation"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.regionalExtension]
#Type = string
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.nodes.NodeXY.list.attributes.regionalExtension"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.referenceLaneID]
Type = decimal
LowerLimit = 0
UpperLimit = 255
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.computed"}}]}
#there is a choice between small and large
[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.offsetXaxis]
Type = choice
Choices = ["small", "large"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed"}}]}
#there is a choice between small and large
[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.offsetXaxis.small]
Type = decimal
LowerLimit = -2047
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.offsetXaxis.small"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.offsetXaxis.large]
Type = decimal
LowerLimit = -32767
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.offsetXaxis.large"}}]}
#there is a choice between small and large
[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.offsetYaxis]
Type = choice
Choices = ["small", "large"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed"}}]}
#there is a choice between small and large
[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.offsetYaxis.small]
Type = decimal
LowerLimit = -2047
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.offsetYaxis.small"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.offsetYaxis.large]
Type = decimal
LowerLimit = -32767
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.offsetYaxis.large"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.rotateXY]
Type = decimal
LowerLimit = 0
UpperLimit = 28800
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.rotateXY"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.scaleXaxis]
Type = decimal
LowerLimit = -2048
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.compute.scaleXaxis"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.oldRegion.area.shapePointSet.nodeList.computed.scaleYaxis]
Type = decimal
LowerLimit = -2048
UpperLimit = 2047
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.compute.scaleYaxis"}}]}

#[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.regionalExtension]
#Type = string
#EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.GeographicalPath.description.path.offset.xy.computed.regionalExtension"}}]}

# -------- tested -----------
[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle.center]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle.center.lat]
Type = decimal
LowerLimit = -900000000
UpperLimit = 900000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle.center"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle.center.long]
Type = decimal
LowerLimit = -1799999999
UpperLimit = 1800000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle.center"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle.center.elevation]
Type = decimal
LowerLimit = -4096
UpperLimit = 61439
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle.center.elevation"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle.center.regional]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle.center.regional"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle.radius]
Type = decimal
LowerLimit = 0
UpperLimit = 4095
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle.units]
Type = enum
Values = ["centimeter", "cm2-5", "decimenter", "meter", "kilometer", "foot", "yard", "mile"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.circle"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.anchor.lat]
Type = decimal
LowerLimit = -900000000
UpperLimit = 900000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.anchor"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.anchor.long]
Type = decimal
LowerLimit = -1799999999
UpperLimit = 1800000001
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.anchor"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.anchor.elevation]
Type = decimal
LowerLimit = -4096
UpperLimit = 61439
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.anchor.elevation"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.anchor.regional]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.anchor.regional"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.scale]
Type = decimal
LowerLimit = 0
UpperLimit = 15
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.scale"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.nodeList.list.xOffset]
Type = decimal
LowerLimit = -32768
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.nodeList"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.nodeList.list.yOffset]
Type = decimal
LowerLimit = -32768
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.nodeList"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.nodeList.list.zOffset]
Type = decimal
LowerLimit = -32768
UpperLimit = 32767
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.regions.description.validRegion.area.regionPointSet.nodeList.list.zOffset"}}]}


# -- Part III, Content
[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content] #Choice
Type = choice
Choices = ["advisory", "workZone", "genericSign", "speedLimit", "exitService"]
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.advisory.SEQUENCE.list.item.itis] #Choice
Type = decimal
LowerLimit = 0
UpperLimit = 65535
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.advisory"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.advisory.SEQUENCE.list.item.text]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.advisory.SEQUENCE.list.item.text"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.workZone.SEQUENCE.list.item.itis] #Choice
Type = decimal
LowerLimit = 0
UpperLimit = 65535
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.workZone"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.workZone.SEQUENCE.list.item.text]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.workZone.SEQUENCE.list.item.text"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.genericSign.SEQUENCE.list.item.itis] #Choice
Type = decimal
LowerLimit = 0
UpperLimit = 65535
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.genericSign"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.genericSign.SEQUENCE.list.item.text]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.genericSign.SEQUENCE.list.item.text"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.speedLimit.SEQUENCE.list.item.itis] #Choice
Type = decimal
LowerLimit = 0
UpperLimit = 65535
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.speedLimit"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.speedLimit.SEQUENCE.list.item.text]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.speedLimit.SEQUENCE.list.item.text"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.exitService.SEQUENCE.list.item.itis] #Choice
Type = decimal
LowerLimit = 0
UpperLimit = 65535
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.exitService"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.exitService.SEQUENCE.list.item.text]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.content.exitService.SEQUENCE.list.item.text"}}]}

[payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.url]
Type = string
EqualsValue = {"conditions":[{"ifPart":{"fieldName":"payload.data.MessageFrame.value.TravelerInformation.dataFrames.TravelerDataFrame.url"}}]}